import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import com.github.jk1.license.render.*

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'java'
    id 'application'
    id 'com.github.jk1.dependency-license-report'
}

ext {
    slf4jVersion        = '2.0.3'
    log4jVersion        = '2.19.0'
}

group 'com.exactpro.th2'
version release_version

repositories {
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
    mavenCentral()
}

dependencies {
    api platform('com.fasterxml.jackson:jackson-bom:2.14.0')
    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    implementation('com.exactpro.th2:pico-operator:1.4.0-dev') {
        exclude group: 'org.junit.jupiter'
        exclude group: 'org.junit'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "io.github.microutils:kotlin-logging:2.0.10"

    implementation("org.slf4j:slf4j-api:${slf4jVersion}")
    implementation("org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")

    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.core:jackson-annotations")
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    implementation "org.apache.commons:commons-text:1.10.0"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

configurations {
  runtime.exclude group: 'org.junit.jupiter'
  runtime.exclude group: 'org.junit'
}

applicationName = 'pico'
application {
    mainClass.set("com.exactpro.th2.pico.PicoKt")
    applicationDefaultJvmArgs = ['-Dpico.operator.config=../cfg/config.yml']
}

distributions {
    main {
        contents {
            from('cfg') {
                into 'cfg'
            }
            from('scripts') {
                into 'bin'
            }

        }
    }
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget.set(JvmTarget.JVM_11)
    }
}

test {
    useJUnitPlatform()
}
dependencyLocking {
    lockAllConfigurations()
}

licenseReport {
    renderers = [
        new XmlReportRenderer("${project.name}-licenses.xml"),
        new CsvCustomReportRenderer("${project.name}-licenses.csv"),
        new JsonReportRenderer("${project.name}-licenses.json"),
        new InventoryHtmlReportRenderer("${project.name}-licenses.html")
    ]
}